<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java之classpath小见解]]></title>
      <url>nthreex.github.io/2017/03/29/Java%E4%B9%8Bclasspath%E5%B0%8F%E8%A7%81%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="Java-中-classpath-详解"><a href="#Java-中-classpath-详解" class="headerlink" title="Java 中 classpath 详解"></a>Java 中 classpath 详解</h1><ul>
<li>nthreex</li>
</ul>
<blockquote>
<p>本文绝大部分是参考以下博客</p>
<p><a href="http://blog.csdn.net/u012179540/article/details/42213945" target="_blank" rel="external">http://blog.csdn.net/u012179540/article/details/42213945</a></p>
</blockquote>
<p>正文</p>
<h2 id="1-从一个简单的HelloWord开始说起，首先我们在JavaTest目录下有Hello-java文件"><a href="#1-从一个简单的HelloWord开始说起，首先我们在JavaTest目录下有Hello-java文件" class="headerlink" title="1.    从一个简单的HelloWord开始说起，首先我们在JavaTest目录下有Hello.java文件"></a>1.    从一个简单的HelloWord开始说起，首先我们在JavaTest目录下有Hello.java文件</h2><pre><code>public class Hello {
   public static void main(String[] args) {
             System.out.println(&quot;Hello, Java&quot;);
   }
}
</code></pre><p>当我们设置了指向JDK的bin目录的环境变量时</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH7gpE/PbnpW.png" alt=""></p>
<h2 id="2-当我们不在JavaTest目录下时编译会成功吗？"><a href="#2-当我们不在JavaTest目录下时编译会成功吗？" class="headerlink" title="2.    当我们不在JavaTest目录下时编译会成功吗？"></a>2.    当我们不在JavaTest目录下时编译会成功吗？</h2><p><img src="http://pic.yupoo.com/nthreex/GkCH7xkv/688Cb.png" alt=""></p>
<p>显然是不行的，因为Hello.java只在JavaTest目录下，怎么解决？<br>加上路径就行了</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH7C2J/wineA.png" alt=""></p>
<p>从图中我们可以看出加上路径之后正常编译了，但是为什么加上路径也不能运行Hello.class呢？</p>
<p>原来，Java对待 .java文件与 .class文件是有区别的。对 .java文件可以直接指定路径给它，而java命令所需的 .class文件不能出现扩展名，也不能指定额外的路径给它。</p>
<p>那么，如何指定路径呢？对于Java所需要的 .class文件，必须通过classpath来指定。</p>
<h2 id="3-设置一个变量名为“classpath”-变量值为“D-JavaTest”的环境变量"><a href="#3-设置一个变量名为“classpath”-变量值为“D-JavaTest”的环境变量" class="headerlink" title="3.    设置一个变量名为“classpath”,变量值为“D:\JavaTest”的环境变量"></a>3.    设置一个变量名为“classpath”,变量值为“D:\JavaTest”的环境变量</h2><p><img src="http://pic.yupoo.com/nthreex/GkCH7I7M/2154E.png" alt=""></p>
<p>然后java Hello</p>
<p>注意，要使环境变量生效需新打开一个命令行窗口</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH88Y8/NOC90.png" alt=""></p>
<p>可以看到，由于设置了classpath环境变量，我们在其他目录下也能运行classpath所执行目录下的 .class文件。设置classpath的目的就是告诉JDK，到哪里去寻找.class文件。这种方法一旦设置好，以后每次运行java或javac时，在需要调用.class文件时，JDK都会自动地来到这里寻找。</p>
<h2 id="4-除了这种设置classpath环境变量的方法之外，还有另一种方法，即在java命令后面加上一个选项classpath，紧跟着不带扩展名的class文件名。"><a href="#4-除了这种设置classpath环境变量的方法之外，还有另一种方法，即在java命令后面加上一个选项classpath，紧跟着不带扩展名的class文件名。" class="headerlink" title="4.    除了这种设置classpath环境变量的方法之外，还有另一种方法，即在java命令后面加上一个选项classpath，紧跟着不带扩展名的class文件名。"></a>4.    除了这种设置classpath环境变量的方法之外，还有另一种方法，即在java命令后面加上一个选项classpath，紧跟着不带扩展名的class文件名。</h2><p>我们把环境变量删除，再新开一个命令行窗口，输入<br>java –classpath d: \JavaTest Hello</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH8ege/SNPpJ.png" alt=""></p>
<p>正常运行，这是因为JDK遇到这种情况时，先根据命令行中的classpath选项中指定的路径去寻找.class文件，找不到时再到全局的classpath环境变量中去寻找。这种情况下，即使是没有设置全局的classpath环境变量，由于已经在命令行中正确地指定类路径，也可以运行。<br>（JDK 1.5.0 之后可以用”classpath”的缩写”cp”,如 java –cp d:\JavaTest Hello）</p>
<h2 id="5-我们再来看-java文件使用了其他类的情况。在D-JavaTest中新建一个Person-java文件，内容如下"><a href="#5-我们再来看-java文件使用了其他类的情况。在D-JavaTest中新建一个Person-java文件，内容如下" class="headerlink" title="5.    我们再来看.java文件使用了其他类的情况。在D:\JavaTest中新建一个Person.java文件，内容如下:"></a>5.    我们再来看.java文件使用了其他类的情况。在D:\JavaTest中新建一个Person.java文件，内容如下:</h2><pre><code>public class Person{

       private String name;

    public Person(String name) {
    this.name = name;
    }

    public String getName() {
    return name;
    }

}
</code></pre><p>然后，修改Hello.java, 内容如下：</p>
<pre><code>public class Hello {
    public static void main(String[] args) {
        Person person = new Person(&quot;Mike&quot;);   
        System.out.println(person.getName());
    }
}
</code></pre><p>在命令行输入，javac d:\JavaTest\Hello.java</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH8kCg/Z9LE7.png" alt=""></p>
<p>这是因为JDK找不到Person类，所以，需要告诉JDK，到哪里去找所用到的类<br>输入<br>Javac –classpath “d:\JavaTest” “d:\JavaTest\Hello.java”<br>(可以不加双引号，双引号不容易出错)</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH8ptG/ok7yF.png" alt=""></p>
<p>编译通过，JDK在D:\JavaTest文件夹下同时生成了Hello.class及Person.class两个文件。实际上，由于Hello.java使用了Person.java 类，JDK先编译生成了Person.class，然后再编译生成Hello.class。因此，不管Hello.java这个主类使用了多少个其他类，只要编译这个类，JDK就会自动编译其他类，很方便。</p>
<h2 id="6-在这一步中，我们将考查Person-java如果放在不同文件夹下面的情况。"><a href="#6-在这一步中，我们将考查Person-java如果放在不同文件夹下面的情况。" class="headerlink" title="6.    在这一步中，我们将考查Person.java如果放在不同文件夹下面的情况。"></a>6.    在这一步中，我们将考查Person.java如果放在不同文件夹下面的情况。</h2><p>先将D:\JavaTest文件夹下的Person.class文件删除，然后在D:\JavaTest文件夹下新建一个名为Source的文件夹，并将D:\JavaTest文件夹下的Person.java移动到其下面。在命令行输入</p>
<p>javac -classpath “D:\JavaTest\Source” “D:\JavaTest\Hello.java”</p>
<p>编译通过。这时javac命令没有什么不同，只需将classpath改成D:\JavaTest\Source就行了。<br>在命令行输入</p>
<p>java -classpath “D:\JavaTest” Hello</p>
<p>这时由于Java需要找在不同文件夹下的两个.class文件，而命令行中只告诉JDK一个路径，即D:\JavaTest，在此文件夹下，只能找到Hello.class，找不到Person.class文件，因此，错误是可以预料得到的：</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH8w0a/ASzFM.png" alt=""></p>
<p>果真找不到Person.class。在设置两个以上的classpath时，先将每个路径以双引号引起来，再将这些路径以“;”号隔开，并且每个路径与“;”之间不能带有空格。因此，我们在命令行重新输入：</p>
<p>java -classpath “D:\JavaTest”;”D:\JavaTest\Source” Hello</p>
<p><img src="http://pic.yupoo.com/nthreex/GkCH8Bl7/kiCNI.png" alt=""></p>
<p><strong>编译成功。但也暴露出一个问题，如果我们需要用到许多分处于不同文件夹下的类，那这个classpath的设置岂不是很长！有没有办法，对于一个文件夹下的所有.class文件，只指定这个文件夹的classpath，然后让JDK自动搜索此文件夹下面所有相应的路径？有，只要使用package。——找到package的原生态</strong></p>
<h2 id="7-package简介。"><a href="#7-package简介。" class="headerlink" title="7.    package简介。"></a>7.    package简介。</h2><p>Java中引入package的概念，主要是为了解决命名冲突的问题。比如说，在我们的例子中，我们设计了一个很简单的Person 类，如果某人开发了一个类库，其中恰巧也有一个Person类，当我们使用这个类库时，两个Person类出现了命名冲突，JDK不知道我们到底要使用哪个Person类。更有甚者，当我们也开发了一个很庞大的类库，无可避免地，我们的类库中与其他人开发的类库中命名冲突的情况就会越来越多。总不能为了避免自己的类名与其他人开发的类名相同，而让每个编程人员都绞尽脑汁地将一个本应叫Writer的类强行改名为 SarkuyaWriter，MikeWriter, SmithWriter吧？</p>
<p>Sun为解决命名冲突问题，就采取了“眼不见心不烦”的策略：将每个类都归属到一个特定的区域中，在同一个区域中的所有类，都不允许同名；而不同区域的类，由于相互看不到，则允许有同名的类存在。这样，就解决了命名冲突的问题，正如北京的张三与上海的张三毕竟不是同一人。这个区域在Java中就叫package。由于package在Java中非常重要，如果你没有定义自己的package，JDK将会你的类都归到一个默认的无名package中。</p>
<p>package除了有避免命名冲突的问题外，还引申出一个保护当前package下所有类文件的功能，主要通过为类定义几种可视度不同的修饰符来实现：public, protected, private,另外加上一个并不真实存在的friendly类型, 这里就不细说了。</p>
<p>前面说过，package主要是为了解决命名冲突的问题，因此，处在不同的包里面的类根本不用担心与其他包的类名发生冲突，因为JDK在默认情况下只使用本包下面的类，对于其他包，JDK一概视而不见：“眼不见心不烦”。如果要引用其他包的类，就必须通过import来引入其他包中相应的类。只有在这时，JDK才会进行进一步的审查，即根据其他包中的这些类、类属变量及方法的可视度来审查是否符合使用要求。如果此审查通不过，编译就此卡住，直至你放弃使用这些类、类属变量及方法，或者将被引入的类、类属变量及方法的修饰符改为符合要求为止。如果此审查通过，JDK最后进行命名是否冲突的审查。如果发现命名冲突，你可以通过在代码中引用全名的方式来显式地引用相应的类，如使用</p>
<pre><code>java.util.Date = new java.util.Date()
</code></pre><p>或是</p>
<pre><code>java.sql.Date = new java.sql.Date()
</code></pre><h2 id="8-事实上，package的第三大作用是简化classpath的设置"><a href="#8-事实上，package的第三大作用是简化classpath的设置" class="headerlink" title="8.    事实上，package的第三大作用是简化classpath的设置"></a>8.    事实上，package的第三大作用是简化classpath的设置</h2><p>之前我们有过这样的命令<br>java -classpath “D:\JavaTest”;”D:\JavaTest\Source” Hello</p>
<p>我们必须将所有的.class文件的路径一一告诉JDK，而不管Source其实就是D:/JavaTest的子目录。如果要用到100个不同路径的.class文件，我们就得将classpath设置为一个特别长的字符串，很累。package的引入，很好地解决了这个问题。<strong>package的与classpath相结合，通过import指令为中介，将原来必须由classpath完成的类路径搜索功能，很巧妙地转移到import的身上，从而使classpath的设置简洁明了。</strong>我们先看下面的例子</p>
<p>先将Source子文件夹中的Person.java设置一个Source包。代码修改如下：</p>
<pre><code>package Source;

public class Person{
    private String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

}
</code></pre><p>再在Hello.java中导入Source.Person。代码修改如下:</p>
<pre><code>import Source.Person;

public class Hello {
    public static void main(String[] args) {
    Person person = new Person(&quot;Mike&quot;);   
    System.out.println(person.getName());
    }
}
</code></pre><p>好了，神奇的命令行出现了：</p>
<pre><code>javac -classpath &quot;D:\JavaTest&quot; &quot;D:\JavaTest\Hello.java&quot;

java -classpath &quot;D:\JavaTest&quot; Hello
</code></pre><p><img src="http://pic.yupoo.com/nthreex/GkCH8MCw/FZBHT.png" alt=""></p>
<p>尽管这次我们只设置了D:\JavaTest的classpath，但编译及运行居然都通过了！事实上，Java在搜索.class文件时，共有三种方法：</p>
<ol>
<li><p>一是全局性的设置，详见第3步，其优点是一次设置，每次使用；</p>
</li>
<li><p>二是在每次的javac及java命令行中自行设置classpath，这也是本文使用最多的一种方式，其优点是不加重系统环境变量的负担；</p>
</li>
<li><p><strong>三是根据import指令（最重要的）</strong>，将其内容在<strong>后台转换为classpath</strong>。JDK将读取全局的环境变量classpath及命令行中的classpath选项信息，然后<strong>将每条classpath与经过转换为路径形式的import的内容相合并，从而形成最终的classpath——原来javac编译阶段还有这么一个过程：classpath的完备化！</strong> 在我们的例子中，JDK读取全局的环境变量classpath及命令行中的classpath选项信息，得到D:\JavaTest。接着，将import Source.Person中的内容，即Source.Person转换为Source\Person, 然后将D:\JavaTest与其合并，成为D:\JavaTest\Source\Person，这就是我们所需要的Person.class的路径。在<strong>Hello.java中有多少条import语句，就自动进行多少次这样的转换。而我们在命令行中只需告诉JDK最顶层的classpath就行了————多米勒骨牌就此打开</strong>，剩下的则由各个类中的import指令代为操劳了。这种移花接木的作法为我们在命令行中手工地设置classpath提供了极大的便利。</p>
</li>
</ol>
<p>应注意的一点是，import指令是与package配套使用的，只有在某类通过“package pacakgename;”设定了包名后，才能给其他类通过import指令导入。如果import试图导入一个尚未设置包的类，JVM就会报错。</p>
<h2 id="9-关于使用JDK类库，及classpath设置。"><a href="#9-关于使用JDK类库，及classpath设置。" class="headerlink" title="9.    关于使用JDK类库，及classpath设置。"></a>9.    关于使用JDK类库，及classpath设置。</h2><p>JDK类库存放于jre\lib\rt.jar文件中，事实上我们用到JDK类库中的类时，只需要import进来就行了，而不用在编译时显示声明JDK类库的classpath。这是因为rt.jar的classpath路径已经悄悄地在后台设置了，我们不必多此一举手工设置其classpath。</p>
<h2 id="10-最后一点需要谈到的是，如果主类恰好也在一个package中-在大型的开发中，其实这才是一种最常见的现象-，那么java命令行的类名前面就必须加上包名。"><a href="#10-最后一点需要谈到的是，如果主类恰好也在一个package中-在大型的开发中，其实这才是一种最常见的现象-，那么java命令行的类名前面就必须加上包名。" class="headerlink" title="10.    最后一点需要谈到的是，如果主类恰好也在一个package中(在大型的开发中，其实这才是一种最常见的现象)，那么java命令行的类名前面就必须加上包名。"></a>10.    最后一点需要谈到的是，如果主类恰好也在一个package中(在大型的开发中，其实这才是一种最常见的现象)，那么java命令行的类名前面就必须加上包名。</h2>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> classpath </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[东山再起]]></title>
      <url>nthreex.github.io/2017/03/27/%E4%B8%9C%E5%B1%B1%E5%86%8D%E8%B5%B7/</url>
      <content type="html"><![CDATA[<p>搭建这个个人网站已是将近一年前了<br>然而，搭建好之后也就不了了之了<br>为什么？<br>还不是因为<strong>太懒太懒太懒</strong><br>从一开始就没有坚持下去<br>如果非要找个理由<br>那就是<br>感觉，自己还只是小白<br>学的技术都是一知半解<br>怎么可以太看得起自己<br>也学技术大牛们写技术博客呢</p>
<p>当然，只是借口</p>
<p>那为何又来开始拾起来了呢</p>
<p>Java老师的安利…</p>
<blockquote>
<p>按照费曼方法和金字塔学习原理，“教”是最好的“学”。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> feeling </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇文章..]]></title>
      <url>nthreex.github.io/2016/06/03/my-new-post/</url>
      <content type="html"><![CDATA[<p>#这是我的第一篇文章</p>
<p> 写些什么好呢</p>
<p> 不让就作诗一首吧<br><a id="more"></a><br> 床前明月光<br> 疑是地上霜<br> 举头望明月<br> 低头思故乡</p>
<p> 嗯嗯嗯，好诗好诗<br> 那就先酱紫吧</p>
<p> 更新于2016.06.04</p>
<!--more-->
<p> 这里什么都没有</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> feeling </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>nthreex.github.io/2016/06/03/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about me]]></title>
      <url>nthreex.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><ul>
<li>nthreex</li>
<li></li>
</ul>
]]></content>
    </entry>
    
  
</search>
